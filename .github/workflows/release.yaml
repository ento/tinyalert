name: Release

on:
  pull_request:
  push:
    branches:
      - "master"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      # Enable containerd for multi-arch support when using docker exporter
      # https://github.com/docker/buildx/issues/59
      - uses: crazy-max/ghaction-setup-docker@26145a578dce008fee793528d031cd72c57d51af # v3.4.0
        with:
          daemon-config: |
            {
              "features": {
                "containerd-snapshotter": true
              }
            }
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: Log in to the Container registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
      - uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        id: meta
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        id: build
        with:
          platforms: linux/amd64,linux/arm64
          load: true
          push: ${{ github.event_name == 'push' }}
          secrets: |
            CACHIX_AUTH_TOKEN=${{ secrets.CACHIX_AUTH_TOKEN }}
            CACHIX_CACHE_NAME=${{ vars.CACHIX_CACHE_NAME }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Smoke test
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          export TINYALERT_DB_PATH=smoke.sqlite
          export TINYALERT_CONFIG=integration/smoke.toml
          docker \
            run \
            --rm \
            -v $(pwd):/work \
            --env-file <(env | grep TINYALERT_) \
            $REGISTRY/$IMAGE_NAME@$DIGEST \
            measure \
            --metrics smoke
          if [ ! -f "$TINYALERT_DB_PATH" ]; then
            echo "Expected tinyalert.sqlite to be created"
            ls -l
            exit 1
          fi
      - if: ${{ github.event_name == 'push' }}
        name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  docker-smoke-test:
    runs-on: ubuntu-latest
    needs: [release-docker]
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./setup/
        with:
          digest: ${{ needs.release-docker.outputs.digest }}
      - run: |
          tinyalert --help
          export TINYALERT_DB_PATH=smoke.sqlite
          export TINYALERT_CONFIG=integration/smoke.toml
          tinyalert measure --metrics smoke
          if [ ! -f "$TINYALERT_DB_PATH" ]; then
            echo "Expected tinyalert.sqlite to be created"
            ls -l
            exit 1
          fi
