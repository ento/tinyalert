name: 'tinyalert'
description: 'Record and alert on metrics completely offline'
inputs:
  measure:
    description: 'Name of metrics defined in config to measure'
    required: false
  report:
    description: 'Set to true to report metric statuses'
    required: false
    default: 'false'
  prune:
    description: 'Prune measured values while keeping the specified number of values per metric'
    default: null
    required: false
  install:
    description: 'Set to true to install tinyalert CLI'
    required: false
    default: 'false'
  db-path:
    description: 'Path to SQLite database to save metrics data'
    required: true
  config-path:
    description: 'Path to TOML config that specifies metrics details'
    required: true
outputs:
  outcome:
    description: 'Report outcome: ok or alert'
    value: "${{ steps.report.outputs.outcome }}"
  reports:
    description: 'Report data'
    value: "${{ steps.report.outputs.reports }}"
  table:
    description: 'Report output in table format'
    value: "${{ steps.report.outputs.table }}"
  list:
    description: 'Report output in list format'
    value: "${{ steps.report.outputs.list }}"
  diff:
    description: 'Report output in diff format'
    value: "${{ steps.report.outputs.diff }}"
runs:
  using: "composite"
  steps:
    - name: install
      run: |
        import os
        import textwrap
        from pathlib import Path

        action_path = Path(os.environ["action_path"])
        bin_dir = action_path / "bin"
        bin_dir.mkdir(parents=True, exist_ok=True)
        bin_path = bin_dir / "tinyalert"
        app_path = action_path / "dist" / "app.pex"
        bin_path.write_text(textwrap.dedent(f"""
        #!/usr/bin/env bash
        exec python3.8 "{app_path}" "$@"
        """))
        bin_path.chmod(0o755)

        with open(os.environ["GITHUB_PATH"], "a", encoding="utf8", newline="") as f:
          f.write(f"{bin_dir}{os.linesep}")
      shell: python
      env:
        action_path: ${{ github.action_path }}
      if: ${{ inputs.install == 'true' }}
    - name: measure
      run: |
        python3.8 "${{ github.action_path }}dist/app.pex" "${{ inputs.db-path }}" measure --config "${{ inputs.config-path }}" --metrics "${{ inputs.measure }}"
      shell: bash
      if: ${{ inputs.measure }}
    - name: report
      run: |
          import json
          import os
          import os.path
          import subprocess
          from uuid import uuid4

          script_path = os.path.join(os.environ["GITHUB_ACTION_PATH"], "dist/app.pex")
          proc = subprocess.run([
              "python3.8",
              script_path,
              os.environ["DB_PATH"],
              "report",
              "--format",
              "json",
          ], capture_output=True, text=True)
          output = json.loads(proc.stdout)
          outcome = "ok" if proc.returncode == 0 else "alert"
          eof = uuid4()
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf8", newline="") as f:
              f.write(f"reports<<{eof}{os.linesep}{output['reports']}{os.linesep}{eof}{os.linesep}")
              f.write(f"table<<{eof}{os.linesep}{output['table']}{os.linesep}{eof}{os.linesep}")
              f.write(f"list<<{eof}{os.linesep}{output['list']}{os.linesep}{eof}{os.linesep}")
              f.write(f"diff<<{eof}{os.linesep}{output['diff']}{os.linesep}{eof}{os.linesep}")
              f.write(f"outcome<<{eof}{os.linesep}{outcome}{os.linesep}{eof}{os.linesep}")
      env:
        DB_PATH: ${{ inputs.db-path }}
      shell: python
      id: report
      if: ${{ inputs.report == 'true' }}
    - name: prune
      run: |
        python3.8 "${{ github.action_path }}dist/app.pex" "${{ inputs.db-path }}" prune --keep "${{ inputs.prune }}"
      shell: bash
      if: ${{ inputs.prune }}
